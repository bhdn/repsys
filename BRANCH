The detached binaries repository
================================

A brief description:

Ideally, all binaries from packages sources (ie. all the binary files inside
SOURCES/) will be placed in another subversion repository. This repository
is called "tarballs repository", "binaries repository" or just "binrepo".
It will contain mostly the same directory structure of the main repository,
but instead of having SOURCES and SPECS, it will only have a SOURCES-bin
directory. Every copy/move operation should happen in both repositories.

In order to allow deceasing binaries from older distributions, each stable
distro will have its own subversion repository for binary files.  repsys
knows how to access these binrepos by checking which URL defined in the
"[binrepo]" section of the configuration file matches the path-part of the
repository being accessed.  (see open issues)

Mapping revisions
-----------------

In order to allow the use of `repsys {getsrpm,co} -r REV`, repsys will have
to use a reference in the text repo which will be used to know in what
state was the binrepo when a binary was uploaded.

We cannot use direct revision number mapping through properties/files/etc
mainly because we may have multiple binaries repositories, and eventually
they can be filtered for reducing space, thus can't ensure revisions will
survive.  Thus another mechanism which relies on dates instead of revisions
numbers is needed.

When a binary is uploaded to the binrepo, the file `sha1.lst` is updated to
have the files's hash and commited in the main text repo. This file will be
used as the reference when the user uses -r REV on repsys. repsys will
checkout the package in the main text repo with -r REV and then will use
the "Last Changed Date" to checkout the binrepo part.

Why a new repository without the tarballs
==========================================

- the current svn repository is too large, hard to manage
- big binary files (in general, "tarballs") history is of little value in
  the distro development, we care much more about our specs, patches,
  configurations, etc.; nonetheless, those big files we don't care much for
  take the most resources and make backups and restoration in case of
  failure very expensive, much more than the more valuable data
- there is no easy way to strip undesired tarballs without recreating the
  whole repository
- fedora and ubuntu have separated repositories, so we must have it too!


Drawbacks of this layout
=========================

- (always) everything that changes the single-repository usage increases the chance
  of failure and make things more complicated.
- subversion can't be used alone
- ...


Open issues
============

Multiple binrepos dont allow us to have one permanent URL
---------------------------------------------------------

We would have to update the configuration files from all the users in order
to add a new stable repository. spuk suggests to use properties in the main
text repo that would point to the right repository locations.

How to handle failures when operating on more repositores?
----------------------------------------------------------

binrepos should replicate the structure of the main text repo. What we
should do if the markrelease succeeds in the binrepo, but fails in the main
text repo?

R: Markrelease must be done first in the txtrepo. If it fails there "we're
in trouble" (though currently, we just miss it[0]).  When the markrelease is
done in the txtrepo, we can do markrelease in the binrepo using '-r {DATE}',
using the markrelease date in the txtrepo as '{DATE}'.

[0] We should add transaction support for markrelease. The transaction could
be stored out of the packages SVN (another SVN, a DB, a txt file, etc.), and
would work like:

0. mark beginning of markrelease
1. do markrelease
2. mark sucessful end of markrelease
   or mark failed markrelease, so we can replay it later


Interesting use cases (first phase)
==================================

repsys co 2008.1/mutt
---------------------

- repsys checkouts
  http://svn.mandriva.com/svn/packages/updates/2008.1/mutt/current to the
  mutt directory

- repsys checkouts
  http://svn.mandriva.com/svn/binrepo/updates/2008.1/mutt/current/SOURCES-bin
  into mutt/SOURCES-bin

- creates symlinks for all files found in SOURCES-bin/ into ../SOURCES/

  (rpm doesn't handle symlinks, this allows us to have explicit links and
   proper src.rpm generates by rpmbuild)

In case the path doesn't exist in the binrepo it will not fail, as we may
have not imported all packages or the repository is not prepared to work on
this model, etc.

markrelease of a package
------------------------

   $ repsys markrelease 

- will copy current/ to releases/VERSION/RELEASE, as usual

- will copy current/ to releases/, on the binrepo 

- and will perform this copy on the binrepo too

Optionally, markrelease could create revprops indicating which is the
revision of current/ on the binrepo that represents the tarballs that are
being tagged.


Use cases to be implemented after the first phase
=================================================

upgrading to a newer version of the package
-------------------------------------------

  $ cd bla/SOURCES/
  $ wget http://prdownloads.sourceforge.net/bla/bla-1.6.tar.bz2
  $ repsys add bla-1.6.0.tar.bz2

- repsys notices this is a tarball (checking filename and/or file size)

- repsys will move the file to SOURCES-bin/, create the symlink, and svn-add
  it to the working copy

  $ # the user updates the spec

  $ repsys rm SOURCES/bla-1.5.1.tar.bz2

- it will remove the symlink and run svn rm on
  SOURCES-bin/bla-1.6.0.tar.bz2

  $ cd ../ # package top dir
  $ repsys ci

- repsys will commit the new tarball on SOURCES-bin/ and then on the rest
  of the working copy

repsys sync would perform these steps too.

importing a package
-------------------

  $ repsys putsrpm mypkg.src.rpm

- repsys will open the src.rpm

- will look for tarballs inside SOURCES/ and import them to
  http://svn.mandriva.com/svn/binrepo/cooker/mypkg/current/SOURCES/

- will move the tarballs out of SOURCES and import the remaining files to
  http://svn.mandriva.com/svn/packages/cooker/mypkg/current/

- will do whatever else putsrpm already does


TODO
=====

First phase
-----------

- upload
- markrelease
- putsrpm
- getsrpm


Second phase
------------

- up
- sync


Rejected or postponed ideas
===========================

Use of a plain filesystem storage for the tarballs
--------------------------------------------------
This was planned, then rejected. It becomes too complicated when thinking
about markrelease, and mapping SVN revisions to binaries versions, basically
requiring implementing VCS-like features on top of filesystem.  Would also
require implementing another authentication and access scheme.  The main
feature would be ease of removing old binaries, which isn't much of a point
because we don't know precisely what and when we want to remove, so may end
up not removing much files anyway.

Use of a plain unversioned filesystem storage for the tarballs
--------------------------------------------------------------
Different than the previous one, this would mean not relying at all on
history keeping.  Structure could be something simple like:
  packages/${pkg:0:1}/$pkg/$tarball

This alternative does not suffice for Cooker, nor for supported distros, for
which we want history.  It could, however, at some point be used for "very
old" distros, for which we may have lost interest in keeping *binaries*
history (package history will kept "forever" in the main SVN repository).

Open tarballs repository
------------------------
This idea is not really rejected. It does not go against splitting txtrepo
and binrepo, but rather complement this idea, where the
open-tarballs-repository would take the place of the binrepo.  The txtrepo
would still be used +- the same way.

Use of externals for more seamless Subversion usage
---------------------------------------------------
This idea is not discarded, but it just provides easiness. OTOH, it makes
things moer complicated:
- markrelease ...
- branching whole distro ...
- keeping externals up-to-date
- authentication and access control: only markrelease action done by the
  build system should be allowed to change externals (so what about importing
  new packages?)
- just a convenience, we don't need and shouldn't rely on externals for
  running the build system, so why do it?

Use of "external" xdelta to save space on binaries
--------------------------------------------------
But how? First idea is this could be done by defining a protocol and
assuming repository manipulation with repsys (for ease).  Repsys could
xdelta tarballs and add it to SVN with a special filename, then use it when
checking out.  Would require a policy/algorithm on when to ditch old whole
binaries, too (i.e.  hopefully wouldn't need to be handled manually by the
maintainer).  Also, this is something complemental to splitting the
repository, so we may do it later.


The Future
==========
- Open tarballs repositories
  - suited for GIT, maybe multi-VCS
  - incremental move
  - not everything will be suited for this, must handle all cases or be
    optional
