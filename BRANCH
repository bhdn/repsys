The detached binaries repository
================================

A brief description:

All binaries from packages sources (ie. all the binary files inside
SOURCES/) will be placed in another subversion repository. This repository
is called "tarballs repository", "binaries repository" or just "binrepo".
It will contain mostly the same directory structure of the main repository,
but instead of having SOURCES and SPECS, it will only have a SOURCES-bin
directory. Every copy/move operation should happen in both repositories.

In order to allow checking out a specific version of the package, repsys
will have to keep a subverion property pointing to the current revision on
the binrepo for that directory. For now, the property is mdv:binrepo-rev,
and should always be set in current/.

In order to allow deceasing binaries from older distributions, each stable
distro will have its own subversion repository. repsys knows how to access
these binrepos by checking which URL defined in the "[binrepo]" section of
the configuration file matches the path-part of the repository being
accessed. (see open issues)

Why a new repository without the tarballs
==========================================

- the current svn repository is too large, hard to manage
- there is no easy way to strip undesired tarballs without recreating the
  whole repository
- fedora and ubuntu have separated repositories, so we must do it too!


Drawbacks of this layout
=========================

- (always) everything that changes the single-repository usage increases the chance
  of failure and make things more complicated.
- subversion can't be used alone
- ...


Open issues
============

Multiple binrepos dont allow us to have one permanent URL
---------------------------------------------------------

We would have to update the configuration files from all the users in order
to add a new stable repository. spuk suggests to use properties in the main
text repo that would point to the right repository locations.

How to handle failures when operating on more repositores?
----------------------------------------------------------

binrepos should replicate the structure of the main text repo. What we
should do if the markrelease succeeds in the binrepo, but fails in the main
text repo?

R: Markrelease must be done first in the txtrepo. If it fails there "we're
in trouble" (though currently, we just miss it[0]).  When the markrelease is
done in the txtrepo, we can do markrelease in the binrepo using '-r {DATE}',
using the markrelease date in the txtrepo as '{DATE}'.

[0] We should add transaction support for markrelease. The transaction could
be stored out of the packages SVN (another SVN, a DB, a txt file, etc.), and
would work like:

0. mark beginning of markrelease
1. do markrelease
2. mark sucessful end of markrelease
   or mark failed markrelease, so we can replay it later


Interesting use cases (first phase)
==================================

repsys co 2008.1/mutt
---------------------

- repsys checkouts
  http://svn.mandriva.com/svn/packages/updates/2008.1/mutt/current to the
  mutt directory

- repsys checkouts
  http://svn.mandriva.com/svn/binrepo/updates/2008.1/mutt/current/SOURCES-bin
  into mutt/SOURCES-bin

- creates symlinks for all files found in SOURCES-bin/ into ../SOURCES/

  (rpm doesn't handle symlinks, this allows us to have explicit links and
   proper src.rpm generates by rpmbuild)

In case the path doesn't exist in the binrepo it will not fail, as we may
have not imported all packages or the repository is not prepared to work on
this model, etc.

markrelease of a package
------------------------

   $ repsys markrelease 

- will copy current/ to releases/VERSION/RELEASE, as usual

- will copy current/ to releases/, on the binrepo 

- and will perform this copy on the binrepo too

Optionally, markrelease could create revprops indicating which is the
revision of current/ on the binrepo that represents the tarballs that are
being tagged.


Use cases to be implemented after the first phase
=================================================

upgrading to a newer version of the package
-------------------------------------------

  $ cd bla/SOURCES/
  $ wget http://prdownloads.sourceforge.net/bla/bla-1.6.tar.bz2
  $ repsys add bla-1.6.0.tar.bz2

- repsys notices this is a tarball (checking filename and/or file size)

- repsys will move the file to SOURCES-bin/, create the symlink, and svn-add
  it to the working copy

  $ # the user updates the spec

  $ repsys rm SOURCES/bla-1.5.1.tar.bz2

- it will remove the symlink and run svn rm on
  SOURCES-bin/bla-1.6.0.tar.bz2

  $ cd ../ # package top dir
  $ repsys ci

- repsys will commit the new tarball on SOURCES-bin/ and then on the rest
  of the working copy

repsys sync would perform these steps too.

importing a package
-------------------

  $ repsys putsrpm mypkg.src.rpm

- repsys will open the src.rpm

- will look for tarballs inside SOURCES/ and import them to
  http://svn.mandriva.com/svn/binrepo/cooker/mypkg/current/SOURCES/

- will move the tarballs out of SOURCES and import the remaining files to
  http://svn.mandriva.com/svn/packages/cooker/mypkg/current/

- will do whatever else putsrpm already does

Description
===========

Support separate repositories for tarballs.

TODO
=====

First phase
-----------

- upload
- markrelease
- putsrpm
- getsrpm


Second phase
------------

- up
- sync
